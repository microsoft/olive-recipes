import json
from pathlib import Path
from typing import Optional

from .constants import OliveDeviceTypes, OlivePassNames, OlivePropertyNames, PhaseTypeEnum
from .model_parameter import ModelParameter, RuntimeOverwrite, Section
from .parameters import Parameter
from .utils import isLLM_by_id, open_ex
from .model_info import ModelList

def generate_quantization_config(folder: Path, file: str, modelList: ModelList) -> Optional[Section]:
    """
    Generates a quantization configuration section for the given file.
    """
    with open_ex(folder / file, "r") as f:
        content = json.load(f)
    parameters = []
    data_configs = content.get(OlivePropertyNames.DataConfigs, [])
    for k, v in content[OlivePropertyNames.Passes].items():
        if v[OlivePropertyNames.Type].lower() == OlivePassNames.OnnxStaticQuantization:
            activation_type = v.get("activation_type")
            if activation_type:
                parameters.append(
                    Parameter(
                        template=Parameter(
                            autoGenerated=True,
                            template="ActivationType",
                            path=f"{OlivePropertyNames.Passes}.{k}.activation_type",
                        )
                    )
                )
            precision = v.get("precision")
            if precision:
                parameters.append(
                    Parameter(
                        template=Parameter(
                            autoGenerated=True,
                            template="WeightType",
                            path=f"{OlivePropertyNames.Passes}.{k}.precision",
                        )
                    )
                )
            data_config = v.get("data_config")
            if data_config:
                for i in range(len(data_configs)):
                    if data_configs[i].get("name") == data_config:
                        data_name = data_configs[i].get("data_name")
                        parameters.append(
                            Parameter(
                                template=Parameter(
                                    autoGenerated=True,
                                    template="QuantizationDataset",
                                    path=f"{OlivePropertyNames.DataConfigs}[{i}].data_name",
                                    values=[data_name],
                                )
                            )
                        )

                        subset = data_configs[i].get("subset")
                        if subset:
                            parameters.append(
                                Parameter(
                                    template=Parameter(
                                        autoGenerated=True,
                                        template="QuantizationDatasetSubset",
                                        path=f"{OlivePropertyNames.DataConfigs}[{i}].subset",
                                        values=[subset],
                                    )
                                )
                            )
                            subsets = modelList.DatasetSubset.get(data_name)
                            if subsets:
                                parameters[-1].values = subsets

                        split = data_configs[i].get("split")
                        if split:
                            parameters.append(
                                Parameter(
                                    template=Parameter(
                                        autoGenerated=True,
                                        template="QuantizationDatasetSplit",
                                        path=f"{OlivePropertyNames.DataConfigs}[{i}].split",
                                        values=[split],
                                    )
                                )
                            )
                            splits = modelList.DatasetSplit.get(data_name)
                            if splits:
                                parameters[-1].values = splits

                        max_samples = data_configs[i].get("max_samples")
                        if max_samples:
                            parameters.append(
                                Parameter(
                                    template=Parameter(
                                        autoGenerated=True,
                                        template="QuantizationDatasetSize",
                                        path=f"{OlivePropertyNames.DataConfigs}[{i}].max_samples",
                                    )
                                )
                            )
                        break

    if parameters:
        return Section(
            autoGenerated=True,
            name="Quantize",
            phase=PhaseTypeEnum.Quantization,
            parameters=parameters,
        )
    return None


def generator_amd(id: str, recipe, folder: Path, modelList: ModelList):
    aitk = recipe.get("aitk", {})
    auto = aitk.get("auto", False)
    isLLM = isLLM_by_id(id)
    if not auto or not isLLM:
        return
    amd_runtime_values: list[str] = recipe.get("devices", [recipe.get("device")])
    file = recipe.get("file")

    name = f"Convert to AMD {"/".join([runtime.upper() for runtime in amd_runtime_values])}"
    addCpu = False
    oliveFile = aitk.get("oliveFile")

    sections = []
    quantize = generate_quantization_config(folder, file, modelList)
    if quantize:
        sections.append(quantize)

    requirements = aitk.get("requirements")
    runtimeOverwrite = None
    if requirements:
        runtimeOverwrite = RuntimeOverwrite(autoGenerated=True, executeRequirement=requirements)
    aitkRuntimeOverwrite = aitk.get("runtimeOverwrite")
    if aitkRuntimeOverwrite:
        if runtimeOverwrite is None:
            runtimeOverwrite = RuntimeOverwrite(autoGenerated=True)
        executeEp = aitkRuntimeOverwrite.get("executeEp")
        runtimeOverwrite.executeEp = executeEp

    requirements_patches = aitk.get("requirementsPatches")
    evalRuntime = aitk.get("evalRuntime")

    parameter = ModelParameter(
        name=name,
        isLLM=isLLM,
        addCpu=addCpu,
        oliveFile=oliveFile,
        sections=sections,
        runtimeOverwrite=runtimeOverwrite,
        executeRuntimeFeatures=requirements_patches,
        evalRuntime=evalRuntime
    )
    parameter._file = str(folder / (file + ".config"))
    parameter.writeIfChanged()
    print(f"\tGenerated AMD configuration for {file}")