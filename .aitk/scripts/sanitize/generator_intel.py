import json
from pathlib import Path
from typing import Optional

from .constants import OliveDeviceTypes, OlivePassNames, OlivePropertyNames, PhaseTypeEnum
from .generator_common import create_model_parameter
from .model_parameter import Section
from .parameters import Parameter
from .utils import isLLM_by_id, open_ex


def generate_quantization_config(configFile: Path) -> Optional[Section]:
    """
    Generates a quantization configuration section for the given file.
    """
    with open_ex(configFile, "r") as f:
        content = json.load(f)
    parameters = []
    for k, v in content[OlivePropertyNames.Passes].items():
        if v[OlivePropertyNames.Type].lower() == OlivePassNames.OpenVINOOptimumConversion:
            config = v.get("ov_quant_config", {})
            dataset = config.get("dataset")
            if dataset:
                parameters.append(
                    Parameter(
                        autoGenerated=True,
                        template=Parameter(
                            template="QuantizationDataset",
                            path=f"{OlivePropertyNames.Passes}.{k}.ov_quant_config.dataset",
                            values=[dataset],
                        ),
                    )
                )
    if parameters:
        return Section(
            autoGenerated=True,
            name="Quantize",
            phase=PhaseTypeEnum.Quantization,
            parameters=parameters,
        )
    return None


def generator_intel(id: str, recipe, folder: Path):
    aitk = recipe.get("aitk", {})
    auto = aitk.get("auto", True)
    isLLM = isLLM_by_id(id)
    if not auto or not isLLM:
        return
    intel_runtime_values: list[str] = recipe.get("devices", [recipe.get("device")])
    name = f"Convert to Intel {'/'.join([runtime.upper() for runtime in intel_runtime_values])}"

    file = recipe.get("file")
    configFile = folder / file

    parameter = create_model_parameter(aitk, name, configFile)
    parameter.addCpu = False
    parameter.isLLM = isLLM

    parameter.intelRuntimeValues = [OliveDeviceTypes(runtime) for runtime in intel_runtime_values]
    parameter.isIntel = True

    quantize = generate_quantization_config(configFile)
    if quantize:
        parameter.sections.append(quantize)

    parameter.writeIfChanged()
    print(f"\tGenerated Intel configuration for {file}")
